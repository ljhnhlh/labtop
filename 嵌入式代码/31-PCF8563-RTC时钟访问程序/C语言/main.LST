C51 COMPILER V9.01   MAIN                                                                  10/23/2018 08:57:53 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: F:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          /*---------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited ----------------------------------*/
   4          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   5          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   8          /* --- Web: www.GXWMCU.com --------------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了宏晶科技的资料及程序   */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          
  15          
  16          /*************  本程序功能说明  **************
  17          
  18          读写RTC, IC为PCF8563.
  19          
  20          用STC的MCU的IO方式控制74HC595驱动8位数码管。
  21          
  22          用户可以修改宏来选择时钟频率.
  23          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下, 用户修改MCU主时钟频率时,自动定时于1ms.
  24          
  25          用户可以在显示函数里修改成共阴或共阳.推荐尽量使用共阴数码管.
  26          
  27          8位数码管显示时间(小时-分钟-秒).
  28          
  29          行列扫描按键键码为17~32.
  30          
  31          按键只支持单键按下, 不支持多键同时按下, 那样将会有不可预知的结果.
  32          
  33          键按下超过1秒后,将以10键/秒的速度提供重键输出. 用户只需要检测KeyCode是否非0来判断键是否按下.
  34          
  35          调整时间键:
  36          键码17: 小时+.
  37          键码18: 小时-.
  38          键码19: 分钟+.
  39          键码20: 分钟-.
  40          
  41          
  42          ******************************************/
  43          
  44          
  45          #define MAIN_Fosc               22118400L       //定义主时钟
  46          
  47          #include        "STC15Fxxxx.H"
  48          
  49          
  50          
  51          /***********************************************************/
  52          
  53          #define DIS_DOT         0x20
  54          #define DIS_BLACK       0x10
  55          #define DIS_            0x11
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 08:57:53 PAGE 2   

  56          
  57          
  58          /****************************** 用户定义宏 ***********************************/
  59          
  60          
  61          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))           //Timer 0 中断频率, 1000次/秒
  62          
  63          /*****************************************************************************/
  64          
  65          
  66          
  67          
  68          
  69          
  70          /*************  本地常量声明    **************/
  71          u8 code t_display[]={                                           //标准字库
  72          //       0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  73                  0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  74          //black  -     H    J    K        L        N    o   P    U     t    G    Q    r   M    y
  75                  0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  76                  0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};        //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
  77          
  78          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};              //位码
  79          
  80          
  81          /*************  IO口定义        **************/
  82          sbit    P_HC595_SER   = P4^0;   //pin 14        SER             data input
  83          sbit    P_HC595_RCLK  = P5^4;   //pin 12        RCLk    store (latch) clock
  84          sbit    P_HC595_SRCLK = P4^3;   //pin 11        SRCLK   Shift data clock
  85          
  86          
  87          /*************  本地变量声明    **************/
  88          
  89          u8      LED8[8];                //显示缓冲
  90          u8      display_index;  //显示位索引
  91          bit     B_1ms;                  //1ms标志
  92          
  93          u8 IO_KeyState, IO_KeyState1, IO_KeyHoldCnt;    //行列键盘变量
  94          u8      KeyHoldCnt;     //键按下计时
  95          u8      KeyCode;        //给用户使用的键码, 1~16有效
  96          u8      cnt50ms;
  97          
  98          u8      hour,minute,second;     //RTC变量
  99          u16     msecond;
 100          
 101          
 102          /*************  本地函数声明    **************/
 103          void    CalculateAdcKey(u16 adc);
 104          void    IO_KeyScan(void);       //50ms call
 105          void    WriteNbyte(u8 addr, u8 *p, u8 number);
 106          void    ReadNbyte( u8 addr, u8 *p, u8 number);
 107          void    DisplayRTC(void);
 108          void    ReadRTC(void);
 109          void    WriteRTC(void);
 110          
 111          
 112          /****************  外部函数声明和外部变量声明 *****************/
 113          
 114          
 115          /**********************************************/
 116          void main(void)
 117          {
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 08:57:53 PAGE 3   

 118   1              u8      i;
 119   1      
 120   1              P0M1 = 0;       P0M0 = 0;       //设置为准双向口
 121   1              P1M1 = 0;       P1M0 = 0;       //设置为准双向口
 122   1              P2M1 = 0;       P2M0 = 0;       //设置为准双向口
 123   1              P3M1 = 0;       P3M0 = 0;       //设置为准双向口
 124   1              P4M1 = 0;       P4M0 = 0;       //设置为准双向口
 125   1              P5M1 = 0;       P5M0 = 0;       //设置为准双向口
 126   1              P6M1 = 0;       P6M0 = 0;       //设置为准双向口
 127   1              P7M1 = 0;       P7M0 = 0;       //设置为准双向口
 128   1              
 129   1              display_index = 0;
 130   1              
 131   1              AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 132   1              TH0 = (u8)(Timer0_Reload / 256);
 133   1              TL0 = (u8)(Timer0_Reload % 256);
 134   1              ET0 = 1;        //Timer0 interrupt enable
 135   1              TR0 = 1;        //Tiner0 run
 136   1              EA = 1;         //打开总中断
 137   1              
 138   1              for(i=0; i<8; i++)      LED8[i] = 0x10; //上电消隐
 139   1      
 140   1              
 141   1              ReadRTC();
 142   1              F0 = 0;
 143   1              if(second >= 60)        F0 = 1; //错误
 144   1              if(minute >= 60)        F0 = 1; //错误
 145   1              if(hour   >= 24)        F0 = 1; //错误
 146   1              if(F0)  //有错误, 默认12:00:00
 147   1              {
 148   2                      second = 0;
 149   2                      minute = 0;
 150   2                      hour  = 12;
 151   2                      WriteRTC();
 152   2              }
 153   1      
 154   1              DisplayRTC();
 155   1              LED8[2] = DIS_;
 156   1              LED8[5] = DIS_;
 157   1      
 158   1              KeyHoldCnt = 0; //键按下计时
 159   1              KeyCode = 0;    //给用户使用的键码, 1~16有效
 160   1      
 161   1              IO_KeyState = 0;
 162   1              IO_KeyState1 = 0;
 163   1              IO_KeyHoldCnt = 0;
 164   1              cnt50ms = 0;
 165   1              
 166   1              while(1)
 167   1              {
 168   2                      if(B_1ms)       //1ms到
 169   2                      {
 170   3                              B_1ms = 0;
 171   3                              if(++msecond >= 1000)   //1秒到
 172   3                              {
 173   4                                      msecond = 0;
 174   4                                      ReadRTC();
 175   4                                      DisplayRTC();
 176   4                              }
 177   3      
 178   3                              if(++cnt50ms >= 50)             //50ms扫描一次行列键盘
 179   3                              {
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 08:57:53 PAGE 4   

 180   4                                      cnt50ms = 0;
 181   4                                      IO_KeyScan();
 182   4                              }
 183   3                              
 184   3                              if(KeyCode != 0)                //有键按下
 185   3                              {
 186   4                                      if(KeyCode == 17)       //hour +1
 187   4                                      {
 188   5                                              if(++hour >= 24)        hour = 0;
 189   5                                              WriteRTC();
 190   5                                              DisplayRTC();
 191   5                                      }
 192   4                                      if(KeyCode == 18)       //hour -1
 193   4                                      {
 194   5                                              if(--hour >= 24)        hour = 23;
 195   5                                              WriteRTC();
 196   5                                              DisplayRTC();
 197   5                                      }
 198   4                                      if(KeyCode == 19)       //minute +1
 199   4                                      {
 200   5                                              second = 0;
 201   5                                              if(++minute >= 60)      minute = 0;
 202   5                                              WriteRTC();
 203   5                                              DisplayRTC();
 204   5                                      }
 205   4                                      if(KeyCode == 20)       //minute -1
 206   4                                      {
 207   5                                              second = 0;
 208   5                                              if(--minute >= 60)      minute = 59;
 209   5                                              WriteRTC();
 210   5                                              DisplayRTC();
 211   5                                      }
 212   4      
 213   4                                      KeyCode = 0;
 214   4                              }
 215   3      
 216   3                      }
 217   2              }
 218   1      } 
 219          /**********************************************/
 220          
 221          /********************** 显示时钟函数 ************************/
 222          void    DisplayRTC(void)
 223          {
 224   1              if(hour >= 10)  LED8[0] = hour / 10;
 225   1              else                    LED8[0] = DIS_BLACK;
 226   1              LED8[1] = hour % 10;
 227   1              LED8[2] = DIS_;
 228   1              LED8[3] = minute / 10;
 229   1              LED8[4] = minute % 10;
 230   1              LED8[6] = second / 10;
 231   1              LED8[7] = second % 10;
 232   1      }
 233          
 234          /********************** 读RTC函数 ************************/
 235          void    ReadRTC(void)
 236          {
 237   1              u8      tmp[3];
 238   1      
 239   1              ReadNbyte(2, tmp, 3);
 240   1              second = ((tmp[0] >> 4) & 0x07) * 10 + (tmp[0] & 0x0f);
 241   1              minute = ((tmp[1] >> 4) & 0x07) * 10 + (tmp[1] & 0x0f);
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 08:57:53 PAGE 5   

 242   1              hour   = ((tmp[2] >> 4) & 0x03) * 10 + (tmp[2] & 0x0f);
 243   1      }
 244          
 245          /********************** 写RTC函数 ************************/
 246          void    WriteRTC(void)
 247          {
 248   1              u8      tmp[3];
 249   1      
 250   1              tmp[0] = ((second / 10) << 4) + (second % 10);
 251   1              tmp[1] = ((minute / 10) << 4) + (minute % 10);
 252   1              tmp[2] = ((hour / 10) << 4) + (hour % 10);
 253   1              WriteNbyte(2, tmp, 3);
 254   1      }
 255          
 256          
 257          /*****************************************************
 258                  行列键扫描程序
 259                  使用XY查找4x4键的方法，只能单键，速度快
 260          
 261             Y     P04      P05      P06      P07
 262                    |        |        |        |
 263          X         |        |        |        |
 264          P00 ---- K00 ---- K01 ---- K02 ---- K03 ----
 265                    |        |        |        |
 266          P01 ---- K04 ---- K05 ---- K06 ---- K07 ----
 267                    |        |        |        |
 268          P02 ---- K08 ---- K09 ---- K10 ---- K11 ----
 269                    |        |        |        |
 270          P03 ---- K12 ---- K13 ---- K14 ---- K15 ----
 271                    |        |        |        |
 272          ******************************************************/
 273          
 274          
 275          u8 code T_KeyTable[16] = {0,1,2,0,3,0,0,0,4,0,0,0,0,0,0,0};
 276          
 277          void IO_KeyDelay(void)
 278          {
 279   1              u8 i;
 280   1              i = 60;
 281   1              while(--i)      ;
 282   1      }
 283          
 284          void    IO_KeyScan(void)        //50ms call
 285          {
 286   1              u8      j;
 287   1      
 288   1              j = IO_KeyState1;       //保存上一次状态
 289   1      
 290   1              P0 = 0xf0;      //X低，读Y
 291   1              IO_KeyDelay();
 292   1              IO_KeyState1 = P0 & 0xf0;
 293   1      
 294   1              P0 = 0x0f;      //Y低，读X
 295   1              IO_KeyDelay();
 296   1              IO_KeyState1 |= (P0 & 0x0f);
 297   1              IO_KeyState1 ^= 0xff;   //取反
 298   1              
 299   1              if(j == IO_KeyState1)   //连续两次读相等
 300   1              {
 301   2                      j = IO_KeyState;
 302   2                      IO_KeyState = IO_KeyState1;
 303   2                      if(IO_KeyState != 0)    //有键按下
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 08:57:53 PAGE 6   

 304   2                      {
 305   3                              F0 = 0;
 306   3                              if(j == 0)      F0 = 1; //第一次按下
 307   3                              else if(j == IO_KeyState)
 308   3                              {
 309   4                                      if(++IO_KeyHoldCnt >= 20)       //1秒后重键
 310   4                                      {
 311   5                                              IO_KeyHoldCnt = 18;
 312   5                                              F0 = 1;
 313   5                                      }
 314   4                              }
 315   3                              if(F0)
 316   3                              {
 317   4                                      j = T_KeyTable[IO_KeyState >> 4];
 318   4                                      if((j != 0) && (T_KeyTable[IO_KeyState& 0x0f] != 0)) 
 319   4                                              KeyCode = (j - 1) * 4 + T_KeyTable[IO_KeyState & 0x0f] + 16;    //计算键码，17~32
 320   4                              }
 321   3                      }
 322   2                      else    IO_KeyHoldCnt = 0;
 323   2              }
 324   1              P0 = 0xff;
 325   1      }
 326          
 327          
 328          
 329          
 330          /**************** 向HC595发送一个字节函数 ******************/
 331          void Send_595(u8 dat)
 332          {               
 333   1              u8      i;
 334   1              for(i=0; i<8; i++)
 335   1              {
 336   2                      dat <<= 1;
 337   2                      P_HC595_SER   = CY;
 338   2                      P_HC595_SRCLK = 1;
 339   2                      P_HC595_SRCLK = 0;
 340   2              }
 341   1      }
 342          
 343          /********************** 显示扫描函数 ************************/
 344          void DisplayScan(void)
 345          {       
 346   1              Send_595(~T_COM[display_index]);                                //输出位码
 347   1              Send_595(t_display[LED8[display_index]]);       //输出段码
 348   1      
 349   1              P_HC595_RCLK = 1;
 350   1              P_HC595_RCLK = 0;                                                       //锁存输出数据
 351   1              if(++display_index >= 8)        display_index = 0;      //8位结束回0
 352   1      }
 353          
 354          
 355          /********************** Timer0 1ms中断函数 ************************/
 356          void timer0 (void) interrupt TIMER0_VECTOR
 357          {
 358   1              DisplayScan();  //1ms扫描显示一位
 359   1              B_1ms = 1;              //1ms标志
 360   1      }
 361          
 362          
 363          
 364          #define SLAW    0xA2
 365          #define SLAR    0xA3
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 08:57:53 PAGE 7   

 366          
 367          sbit    SDA     = P1^1; //定义SDA  PIN5
 368          sbit    SCL     = P1^0; //定义SCL  PIN6
 369          
 370          /****************************/
 371          void    I2C_Delay(void) //for normal MCS51,     delay (2 * dly + 4) T, for STC12Cxxxx delay (4 * dly + 10) T
 372          {
 373   1              u8      dly;
 374   1              dly = MAIN_Fosc / 2000000UL;            //按2us计算
 375   1              while(--dly)    ;
 376   1      }
 377          
 378          /****************************/
 379          void I2C_Start(void)               //start the I2C, SDA High-to-low when SCL is high
 380          {
 381   1              SDA = 1;
 382   1              I2C_Delay();
 383   1              SCL = 1;
 384   1              I2C_Delay();
 385   1              SDA = 0;
 386   1              I2C_Delay();
 387   1              SCL = 0;
 388   1              I2C_Delay();
 389   1      }               
 390          
 391          
 392          void I2C_Stop(void)                                     //STOP the I2C, SDA Low-to-high when SCL is high
 393          {
 394   1              SDA = 0;
 395   1              I2C_Delay();
 396   1              SCL = 1;
 397   1              I2C_Delay();
 398   1              SDA = 1;
 399   1              I2C_Delay();
 400   1      }
 401          
 402          void S_ACK(void)              //Send ACK (LOW)
 403          {
 404   1              SDA = 0;
 405   1              I2C_Delay();
 406   1              SCL = 1;
 407   1              I2C_Delay();
 408   1              SCL = 0;
 409   1              I2C_Delay();
 410   1      }
 411          
 412          void S_NoACK(void)           //Send No ACK (High)
 413          {
 414   1              SDA = 1;
 415   1              I2C_Delay();
 416   1              SCL = 1;
 417   1              I2C_Delay();
 418   1              SCL = 0;
 419   1              I2C_Delay();
 420   1      }
 421                          
 422          void I2C_Check_ACK(void)         //Check ACK, If F0=0, then right, if F0=1, then error
 423          {
 424   1              SDA = 1;
 425   1              I2C_Delay();
 426   1              SCL = 1;
 427   1              I2C_Delay();
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 08:57:53 PAGE 8   

 428   1              F0  = SDA;
 429   1              SCL = 0;
 430   1              I2C_Delay();
 431   1      }
 432          
 433          /****************************/
 434          void I2C_WriteAbyte(u8 dat)             //write a byte to I2C
 435          {
 436   1              u8 i;
 437   1              i = 8;
 438   1              do
 439   1              {
 440   2                      if(dat & 0x80)  SDA = 1;
 441   2                      else                    SDA     = 0;
 442   2                      dat <<= 1;
 443   2                      I2C_Delay();
 444   2                      SCL = 1;
 445   2                      I2C_Delay();
 446   2                      SCL = 0;
 447   2                      I2C_Delay();
 448   2              }
 449   1              while(--i);
 450   1      }
 451          
 452          /****************************/
 453          u8 I2C_ReadAbyte(void)                  //read A byte from I2C
 454          {
 455   1              u8 i,dat;
 456   1              i = 8;
 457   1              SDA = 1;
 458   1              do
 459   1              {
 460   2                      SCL = 1;
 461   2                      I2C_Delay();
 462   2                      dat <<= 1;
 463   2                      if(SDA)         dat++;
 464   2                      SCL  = 0;
 465   2                      I2C_Delay();
 466   2              }
 467   1              while(--i);
 468   1              return(dat);
 469   1      }
 470          
 471          /****************************/
 472          void WriteNbyte(u8 addr, u8 *p, u8 number)                      /*      WordAddress,First Data Address,Byte lenth       */
 473                                                                                                          //F0=0,right, F0=1,error
 474          {
 475   1              I2C_Start();
 476   1              I2C_WriteAbyte(SLAW);
 477   1              I2C_Check_ACK();
 478   1              if(!F0)
 479   1              {
 480   2                      I2C_WriteAbyte(addr);
 481   2                      I2C_Check_ACK();
 482   2                      if(!F0)
 483   2                      {
 484   3                              do
 485   3                              {
 486   4                                      I2C_WriteAbyte(*p);             p++;
 487   4                                      I2C_Check_ACK();
 488   4                                      if(F0)  break;
 489   4                              }
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 08:57:53 PAGE 9   

 490   3                              while(--number);
 491   3                      }
 492   2              }
 493   1              I2C_Stop();
 494   1      }
 495          
 496          
 497          /****************************/
 498          void ReadNbyte(u8 addr, u8 *p, u8 number)               /*      WordAddress,First Data Address,Byte lenth       */
 499          {
 500   1              I2C_Start();
 501   1              I2C_WriteAbyte(SLAW);
 502   1              I2C_Check_ACK();
 503   1              if(!F0)
 504   1              {
 505   2                      I2C_WriteAbyte(addr);
 506   2                      I2C_Check_ACK();
 507   2                      if(!F0)
 508   2                      {
 509   3                              I2C_Start();
 510   3                              I2C_WriteAbyte(SLAR);
 511   3                              I2C_Check_ACK();
 512   3                              if(!F0)
 513   3                              {
 514   4                                      do
 515   4                                      {
 516   5                                              *p = I2C_ReadAbyte();   p++;
 517   5                                              if(number != 1)         S_ACK();        //send ACK
 518   5                                      }
 519   4                                      while(--number);
 520   4                                      S_NoACK();                      //send no ACK
 521   4                              }
 522   3                      }
 523   2              }
 524   1              I2C_Stop();
 525   1      }
 526          
 527          
 528          /****************************/
 529          
 530          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    946    ----
   CONSTANT SIZE    =     67    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
